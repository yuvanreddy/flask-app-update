name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
      - '*.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: flask-app
  CLOUDSMITH_ORG: your-org-name  # UPDATE THIS
  CLOUDSMITH_REPO: your-repo-name  # UPDATE THIS
  AWS_REGION: us-east-1
  S3_BUCKET: your-scan-results-bucket  # UPDATE THIS
  EKS_CLUSTER_NAME: my-eks-cluster  # UPDATE THIS - should match your terraform cluster name

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}"
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        continue-on-error: false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

  code-scan:
    name: Security & Code Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install scanning tools
        run: |
          pip install bandit safety pylint

      - name: Run Bandit (Security Scanner)
        run: |
          bandit -r app.py -f json -o bandit-report.json || true
          bandit -r app.py -f txt
        continue-on-error: true

      - name: Run Safety (Dependency Scanner)
        run: |
          safety check --json > safety-report.json || true
          safety check
        continue-on-error: true

      - name: Run Pylint (Code Quality)
        run: |
          pylint app.py --output-format=json > pylint-report.json || true
          pylint app.py --fail-under=8.0 || echo "Pylint score below 8.0"
        continue-on-error: true

      - name: Run Trivy (Filesystem Scanner)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-report.json'

      - name: Configure AWS credentials
        if: env.S3_BUCKET != 'your-scan-results-bucket'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload scan results to S3
        if: env.S3_BUCKET != 'your-scan-results-bucket'
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SCAN_DIR=scans/${{ github.sha }}/$TIMESTAMP
          
          aws s3 cp bandit-report.json s3://${{ env.S3_BUCKET }}/$SCAN_DIR/bandit-report.json || true
          aws s3 cp safety-report.json s3://${{ env.S3_BUCKET }}/$SCAN_DIR/safety-report.json || true
          aws s3 cp pylint-report.json s3://${{ env.S3_BUCKET }}/$SCAN_DIR/pylint-report.json || true
          aws s3 cp trivy-fs-report.json s3://${{ env.S3_BUCKET }}/$SCAN_DIR/trivy-fs-report.json || true
          
          echo "Scan results uploaded to s3://${{ env.S3_BUCKET }}/$SCAN_DIR/"

      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            *-report.json
          retention-days: 30

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, code-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Cloudsmith
        uses: docker/login-action@v3
        with:
          registry: docker.cloudsmith.io
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          password: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Generate image tag
        id: image-tag
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          SHORT_SHA=${GITHUB_SHA::7}
          TAG="${BRANCH}-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated image tag: ${TAG}"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:${{ steps.image-tag.outputs.tag }}
            docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}

      - name: Image details
        run: |
          echo "=========================================="
          echo "Docker Image Built and Pushed Successfully!"
          echo "=========================================="
          echo "Image: docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:${{ steps.image-tag.outputs.tag }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "=========================================="

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:${{ steps.image-tag.outputs.tag }}
          format: 'json'
          output: 'trivy-image-report.json'
        env:
          TRIVY_USERNAME: ${{ secrets.CLOUDSMITH_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Configure AWS credentials
        if: env.S3_BUCKET != 'your-scan-results-bucket'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload image scan to S3
        if: env.S3_BUCKET != 'your-scan-results-bucket'
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          aws s3 cp trivy-image-report.json s3://${{ env.S3_BUCKET }}/scans/${{ github.sha }}/$TIMESTAMP/trivy-image-report.json || true

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event_name == 'workflow_dispatch'
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl version --client
          kubectl cluster-info

      - name: Verify cluster connectivity
        run: |
          kubectl get nodes
          kubectl get namespaces

      - name: Create namespace if not exists
        run: |
          kubectl create namespace flask-app --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Cloudsmith pull secret
        run: |
          kubectl create secret docker-registry cloudsmith-registry \
            --docker-server=docker.cloudsmith.io \
            --docker-username=${{ secrets.CLOUDSMITH_USERNAME }} \
            --docker-password=${{ secrets.CLOUDSMITH_API_KEY }} \
            --namespace=flask-app \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update image tag in manifests
        run: |
          # Update the image tag in deployment manifest
          sed -i "s|IMAGE_TAG|${{ needs.build-and-push.outputs.image-tag }}|g" k8s/deployment.yaml
          sed -i "s|CLOUDSMITH_ORG|${{ env.CLOUDSMITH_ORG }}|g" k8s/deployment.yaml
          sed -i "s|CLOUDSMITH_REPO|${{ env.CLOUDSMITH_REPO }}|g" k8s/deployment.yaml
          
          echo "Updated deployment manifest:"
          cat k8s/deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/ -n flask-app

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/${{ env.APP_NAME }} -n flask-app --timeout=5m

      - name: Get deployment status
        run: |
          echo "=========================================="
          echo "Deployment Status"
          echo "=========================================="
          kubectl get pods -n flask-app -l app=${{ env.APP_NAME }}
          kubectl get services -n flask-app
          kubectl get ingress -n flask-app || echo "No ingress found"
          echo "=========================================="

      - name: Get service endpoint
        id: endpoint
        run: |
          echo "Waiting for LoadBalancer endpoint..."
          for i in {1..30}; do
            ENDPOINT=$(kubectl get service ${{ env.APP_NAME }}-service -n flask-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -z "$ENDPOINT" ]; then
              ENDPOINT=$(kubectl get service ${{ env.APP_NAME }}-service -n flask-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            fi
            
            if [ ! -z "$ENDPOINT" ]; then
              echo "endpoint=${ENDPOINT}" >> $GITHUB_OUTPUT
              echo "Service endpoint: ${ENDPOINT}"
              break
            fi
            echo "Waiting for endpoint... (attempt $i/30)"
            sleep 10
          done
          
          if [ -z "$ENDPOINT" ]; then
            echo "Warning: LoadBalancer endpoint not available yet"
            echo "endpoint=pending" >> $GITHUB_OUTPUT
          fi

      - name: Run smoke tests
        if: steps.endpoint.outputs.endpoint != 'pending'
        run: |
          SERVICE_URL=${{ steps.endpoint.outputs.endpoint }}
          
          echo "Testing health endpoint at http://$SERVICE_URL/health"
          
          # Wait for service to be ready
          for i in {1..20}; do
            if curl -f -s http://$SERVICE_URL/health > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              curl http://$SERVICE_URL/health
              break
            fi
            echo "Waiting for service to be ready... (attempt $i/20)"
            sleep 10
          done
        continue-on-error: true

      - name: Display deployment info
        run: |
          echo "=========================================="
          echo "🚀 Deployment Completed Successfully!"
          echo "=========================================="
          echo "Image: docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:${{ needs.build-and-push.outputs.image-tag }}"
          echo "Namespace: flask-app"
          echo "Cluster: ${{ env.EKS_CLUSTER_NAME }}"
          echo "Region: ${{ env.AWS_REGION }}"
          
          if [ "${{ steps.endpoint.outputs.endpoint }}" != "pending" ]; then
            echo "Endpoint: http://${{ steps.endpoint.outputs.endpoint }}"
          else
            echo "Endpoint: Pending (check with: kubectl get svc -n flask-app)"
          fi
          echo "=========================================="

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, code-scan, build-and-push, deploy]
    if: always()
    
    steps:
      - name: Pipeline summary
        run: |
          echo "=========================================="
          echo "CI/CD Pipeline Summary"
          echo "=========================================="
          echo "Test: ${{ needs.test.result }}"
          echo "Code Scan: ${{ needs.code-scan.result }}"
          echo "Build & Push: ${{ needs.build-and-push.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "=========================================="
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Pipeline completed successfully!"
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "⏭️  Deployment was skipped (not on main branch)"
          else
            echo "❌ Pipeline failed - check logs above"
          fi