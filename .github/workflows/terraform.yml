name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Optional manual action (apply/import/destroy)'
        required: false
        default: ''
      destroy_confirm:
        description: 'Type "DESTROY" to allow destroy job'
        required: false
        default: ''

permissions:
  id-token: write
  contents: read

env:
  TF_WORKING_DIR: ./terraform
  TF_IN_AUTOMATION: true

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::816069153839:role/github-actions-eks-admin
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (no backend for validate)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate -no-color

  terraform-security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::816069153839:role/github-actions-eks-admin
          aws-region: us-east-1

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::816069153839:role/github-actions-eks-admin
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - id: plan
        name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -input=false -no-color -out=tfplan
          echo "exitcode=$?" >> $GITHUB_OUTPUT

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-security-scan]
    if: github.ref == 'refs/heads/main' && (github.event_name != 'pull_request')
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::816069153839:role/github-actions-eks-admin
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -input=false

  terraform-import:
    name: Terraform Import
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'import'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::816069153839:role/github-actions-eks-admin
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      # Example import placeholder â€“ adjust to your resource(s)
      - name: Import resource (example)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "Add terraform import commands here if/when needed"
          # terraform import aws_xxx.yyy <id>

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.destroy_confirm == 'DESTROY'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::816069153839:role/github-actions-eks-admin
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -auto-approve -input=false

  notification:
    name: Notification
    runs-on: ubuntu-latest
    if: always()
    needs:
      - terraform-validate
      - terraform-security-scan
      - terraform-plan
      - terraform-apply
      - terraform-import
      - terraform-destroy
    steps:
      - name: Summary
        run: |
          echo "CI Summary:"
          echo "Validate:   ${{ needs.terraform-validate.result }}"
          echo "Sec Scan:   ${{ needs.terraform-security-scan.result }}"
          echo "Plan:       ${{ needs.terraform-plan.result }}"
          echo "Apply:      ${{ needs.terraform-apply.result }}"
          echo "Import:     ${{ needs.terraform-import.result }}"
          echo "Destroy:    ${{ needs.terraform-destroy.result }}"