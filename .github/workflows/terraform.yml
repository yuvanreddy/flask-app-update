name: Complete Infrastructure & Application Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy        # Full deployment (infrastructure + app)
          - infrastructure-only  # Only create infrastructure
          - app-only      # Only deploy app (requires existing cluster)
          - destroy       # Destroy everything

env:
  APP_NAME: flask-app
  CLOUDSMITH_ORG: your-org-name
  CLOUDSMITH_REPO: your-repo-name
  AWS_REGION: us-east-1
  S3_BUCKET: flask-app-artifact
  TF_VERSION: 1.6.0

jobs:
  # Job 1: Create EKS Infrastructure with Terraform
  terraform-infrastructure:
    name: Provision EKS Cluster
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.action == 'deploy' ||
      github.event.inputs.action == 'infrastructure-only' ||
      github.event.inputs.action == 'destroy'
    
    outputs:
      cluster-name: ${{ steps.apply.outputs.cluster_name }}
      cluster-endpoint: ${{ steps.apply.outputs.cluster_endpoint }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Terraform Plan
        if: github.event.inputs.action != 'destroy'
        working-directory: ./terraform
        run: |
          terraform plan -out=tfplan
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Terraform Apply
        if: github.event.inputs.action != 'destroy'
        id: apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve tfplan
          
          # Export outputs
          echo "cluster_name=$(terraform output -raw cluster_id)" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Configure kubectl
        if: github.event.inputs.action != 'destroy'
        run: |
          aws eks update-kubeconfig --name ${{ steps.apply.outputs.cluster_name }} --region ${{ env.AWS_REGION }}
          kubectl get nodes

      - name: Save kubeconfig for later jobs
        if: github.event.inputs.action != 'destroy'
        run: |
          mkdir -p $HOME/.kube
          KUBECONFIG_BASE64=$(cat $HOME/.kube/config | base64 -w 0)
          echo "KUBECONFIG_DATA=$KUBECONFIG_BASE64" >> $GITHUB_ENV
          echo "$KUBECONFIG_BASE64" > kubeconfig-base64.txt

      - name: Upload kubeconfig artifact
        if: github.event.inputs.action != 'destroy'
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig-base64.txt
          retention-days: 1

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ./terraform
        run: |
          terraform destroy -auto-approve
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

  # Job 2: Build and Push Docker Image
  build-and-push:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    if: |
      github.event.inputs.action == 'deploy' ||
      github.event.inputs.action == 'app-only'
    
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest tests/ -v

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Cloudsmith
        uses: docker/login-action@v3
        with:
          registry: docker.cloudsmith.io
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          password: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Generate image tag
        id: image-tag
        run: |
          IMAGE_TAG="${{ github.sha }}"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated image tag: $IMAGE_TAG"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:${{ steps.image-tag.outputs.tag }}
            docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}

      - name: Image details
        run: |
          echo "✅ Image pushed successfully!"
          echo "Repository: docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}"
          echo "Tag: ${{ steps.image-tag.outputs.tag }}"
          echo "Latest: docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:latest"

  # Job 3: Deploy to Kubernetes
  deploy-to-kubernetes:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-and-push]
    if: |
      github.event.inputs.action == 'deploy' ||
      github.event.inputs.action == 'app-only'
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download kubeconfig
        if: github.event.inputs.action == 'deploy'
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig

      - name: Configure kubectl (from artifact)
        if: github.event.inputs.action == 'deploy'
        run: |
          mkdir -p $HOME/.kube
          cat kubeconfig-base64.txt | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl cluster-info

      - name: Configure kubectl (existing cluster)
        if: github.event.inputs.action == 'app-only'
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Verify cluster
        run: |
          echo "Testing cluster connectivity..."
          kubectl get nodes
          kubectl get namespaces

      - name: Create namespace
        run: |
          kubectl create namespace flask-app --dry-run=client -o yaml | kubectl apply -f -

      - name: Create registry secret
        run: |
          kubectl create secret docker-registry cloudsmith-registry \
            --docker-server=docker.cloudsmith.io \
            --docker-username=${{ secrets.CLOUDSMITH_USERNAME }} \
            --docker-password=${{ secrets.CLOUDSMITH_API_KEY }} \
            --namespace=flask-app \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update deployment manifest
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          sed -i "s|image:.*flask-app.*|image: docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:${IMAGE_TAG}|g" k8s/deployment.yaml
          echo "Updated image to: docker.cloudsmith.io/${{ env.CLOUDSMITH_ORG }}/${{ env.CLOUDSMITH_REPO }}/${{ env.APP_NAME }}:${IMAGE_TAG}"

      - name: Deploy to Kubernetes
        run: |
          echo "Deploying application..."
          kubectl apply -f k8s/deployment.yaml -n flask-app
          
          echo ""
          echo "Waiting for rollout to complete..."
          kubectl rollout status deployment/${{ env.APP_NAME }} -n flask-app --timeout=5m

      - name: Verify deployment
        run: |
          echo "==================================="
          echo "Deployment Verification"
          echo "==================================="
          echo ""
          echo "📦 Pods:"
          kubectl get pods -n flask-app -o wide
          echo ""
          echo "🌐 Services:"
          kubectl get services -n flask-app
          echo ""
          echo "📊 Deployments:"
          kubectl get deployments -n flask-app
          echo ""
          echo "🔄 ReplicaSets:"
          kubectl get replicasets -n flask-app

      - name: Wait for LoadBalancer
        run: |
          echo "Waiting for LoadBalancer to provision (this may take 2-3 minutes)..."
          
          for i in {1..60}; do
            SERVICE_IP=$(kubectl get service ${{ env.APP_NAME }}-service -n flask-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            SERVICE_HOSTNAME=$(kubectl get service ${{ env.APP_NAME }}-service -n flask-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            
            if [ -n "$SERVICE_IP" ] || [ -n "$SERVICE_HOSTNAME" ]; then
              echo "✅ LoadBalancer is ready!"
              break
            fi
            
            echo "Waiting... ($i/60)"
            sleep 5
          done

      - name: Get application URL
        id: app-url
        run: |
          SERVICE_IP=$(kubectl get service ${{ env.APP_NAME }}-service -n flask-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          SERVICE_HOSTNAME=$(kubectl get service ${{ env.APP_NAME }}-service -n flask-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          
          if [ -n "$SERVICE_IP" ]; then
            APP_URL="http://$SERVICE_IP"
          elif [ -n "$SERVICE_HOSTNAME" ]; then
            APP_URL="http://$SERVICE_HOSTNAME"
          else
            APP_URL="pending"
          fi
          
          echo "url=$APP_URL" >> $GITHUB_OUTPUT
          
          echo ""
          echo "==================================="
          echo "🚀 Application Deployed!"
          echo "==================================="
          echo "URL: $APP_URL"
          echo "Health Check: $APP_URL/health"
          echo "API Endpoint: $APP_URL/api/data"
          echo "==================================="

      - name: Run smoke tests
        run: |
          APP_URL="${{ steps.app-url.outputs.url }}"
          
          if [ "$APP_URL" != "pending" ]; then
            echo "Running smoke tests..."
            sleep 30  # Give app time to fully initialize
            
            echo ""
            echo "Testing health endpoint..."
            if curl -f -s "$APP_URL/health" > /dev/null; then
              echo "✅ Health check passed"
              curl -s "$APP_URL/health" | jq .
            else
              echo "⚠️  Health check pending - app may still be initializing"
            fi
            
            echo ""
            echo "Testing root endpoint..."
            if curl -f -s "$APP_URL/" > /dev/null; then
              echo "✅ Root endpoint accessible"
            else
              echo "⚠️  Root endpoint pending"
            fi
          else
            echo "⚠️  LoadBalancer still provisioning - manual verification required"
            echo "Check status with: kubectl get service ${{ env.APP_NAME }}-service -n flask-app"
          fi
        continue-on-error: true

  # Job 4: Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure, build-and-push, deploy-to-kubernetes]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "=========================================="
          echo "🎉 Complete Deployment Summary"
          echo "=========================================="
          echo ""
          echo "Action: ${{ github.event.inputs.action }}"
          echo ""
          echo "Job Results:"
          echo "  Infrastructure: ${{ needs.terraform-infrastructure.result }}"
          echo "  Build & Push:   ${{ needs.build-and-push.result }}"
          echo "  Deployment:     ${{ needs.deploy-to-kubernetes.result }}"
          echo ""
          
          if [ "${{ needs.deploy-to-kubernetes.result }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
            echo ""
            echo "Next steps:"
            echo "1. Access your application via the LoadBalancer URL"
            echo "2. Monitor with: kubectl get all -n flask-app"
            echo "3. View logs: kubectl logs -f deployment/${{ env.APP_NAME }} -n flask-app"
          else
            echo "❌ Deployment encountered issues"
            echo ""
            echo "Troubleshooting:"
            echo "1. Check workflow logs above for errors"
            echo "2. Verify AWS credentials and permissions"
            echo "3. Ensure Cloudsmith credentials are correct"
            echo "4. Check cluster status: kubectl get nodes"
          fi
          echo ""
          echo "=========================================="

      - name: Save deployment info
        if: success()
        run: |
          cat > deployment-info.txt <<EOF
          Deployment Information
          =====================
          
          Date: $(date)
          Action: ${{ github.event.inputs.action }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Infrastructure: ${{ needs.terraform-infrastructure.result }}
          Build: ${{ needs.build-and-push.result }}
          Deployment: ${{ needs.deploy-to-kubernetes.result }}
          
          Commands to access:
          kubectl get all -n flask-app
          kubectl logs -f deployment/${{ env.APP_NAME }} -n flask-app
          kubectl get service ${{ env.APP_NAME }}-service -n flask-app
          EOF
          
          cat deployment-info.txt

      - name: Upload deployment info
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment-info.txt