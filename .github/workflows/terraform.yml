name: Terraform Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -input=false
        working-directory: ./terraform
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: terraform/tfplan
          retention-days: 5

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event.inputs.action == 'apply'
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Download Plan
        if: github.event_name == 'push'
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: terraform/
        continue-on-error: true

      - name: Terraform Apply
        run: |
          if [ -f tfplan ]; then
            terraform apply -input=false tfplan
          else
            terraform apply -auto-approve -input=false
          fi
        working-directory: ./terraform
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Get Outputs
        id: outputs
        run: |
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "cluster_name=$(terraform output -raw cluster_id)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ steps.outputs.outputs.cluster_name }} --region ${{ env.AWS_REGION }}
          kubectl get nodes

      - name: Save kubeconfig as secret
        run: |
          KUBECONFIG_BASE64=$(terraform output -raw kubeconfig | base64 -w 0)
          echo "Save this as KUBE_CONFIG secret in GitHub:"
          echo $KUBECONFIG_BASE64
        working-directory: ./terraform

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment:
      name: production-destroy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_VAR_cloudsmith_username: ${{ secrets.CLOUDSMITH_USERNAME }}
          TF_VAR_cloudsmith_api_key: ${{ secrets.CLOUDSMITH_API_KEY }}

  security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          soft_fail: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform
          soft_fail: true
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif