name: Deploy AWS Load Balancer Controller

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'EKS Cluster Name'
        required: false
        default: 'flask-eks-master'
      region:
        description: 'AWS Region'
        required: false
        default: 'us-east-1'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: flask-eks-master

jobs:
  deploy-alb-controller:
    name: Deploy ALB Controller
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region || env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig \
            --region ${{ github.event.inputs.region || env.AWS_REGION }} \
            --name ${{ github.event.inputs.cluster_name || env.CLUSTER_NAME }}

      - name: Verify cluster access
        run: |
          kubectl get nodes
          kubectl get namespaces

      - name: Get Terraform outputs
        working-directory: ./terraform-eks
        run: |
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Initialize Terraform
          terraform init
          
          # Get outputs
          echo "ALB_ROLE_ARN=$(terraform output -raw alb_controller_role_arn 2>/dev/null || echo '')" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "AWS_REGION=$(terraform output -raw region)" >> $GITHUB_ENV

      - name: Check if ALB Controller already exists
        id: check_alb
        run: |
          if kubectl get deployment -n kube-system aws-load-balancer-controller &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "ALB Controller already deployed"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "ALB Controller not found, will deploy"
          fi

      - name: Install cert-manager (required for ALB controller)
        if: steps.check_alb.outputs.exists == 'false'
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
          echo "Waiting for cert-manager to be ready..."
          kubectl wait --namespace cert-manager \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/instance=cert-manager \
            --timeout=300s

      - name: Install ALB Controller CRDs
        if: steps.check_alb.outputs.exists == 'false'
        run: |
          kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master"

      - name: Prepare ALB Controller manifest
        if: steps.check_alb.outputs.exists == 'false'
        run: |
          # Replace placeholders in manifest
          sed -e "s|\${CLUSTER_NAME}|${CLUSTER_NAME}|g" \
              -e "s|\${AWS_REGION}|${AWS_REGION}|g" \
              -e "s|\${ALB_CONTROLLER_ROLE_ARN}|${ALB_ROLE_ARN}|g" \
              terraform-eks/kubernetes/aws-load-balancer-controller.yaml > /tmp/alb-controller.yaml
          
          cat /tmp/alb-controller.yaml

      - name: Deploy ALB Controller
        if: steps.check_alb.outputs.exists == 'false'
        run: |
          kubectl apply -f /tmp/alb-controller.yaml

      - name: Wait for ALB Controller to be ready
        run: |
          echo "Waiting for ALB Controller deployment..."
          kubectl wait --namespace kube-system \
            --for=condition=available deployment/aws-load-balancer-controller \
            --timeout=300s || true
          
          echo "Checking controller pods..."
          kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller

      - name: Verify ALB Controller
        run: |
          echo "=== ALB Controller Status ==="
          kubectl get deployment -n kube-system aws-load-balancer-controller
          kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller
          kubectl logs -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller --tail=20

      - name: Check IngressClass
        run: |
          echo "=== Available IngressClasses ==="
          kubectl get ingressclass

      - name: Deployment Summary
        run: |
          echo "## AWS Load Balancer Controller Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Cluster:** $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Region:** $AWS_REGION" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Controller Status:** Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verify Deployment" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get deployment -n kube-system aws-load-balancer-controller" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY