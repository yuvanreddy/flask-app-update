name: Build, Scan & Push to CloudSmith

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Enables manual trigger button

env:
  IMAGE_NAME: flask-devops-demo
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit (SAST - Python Security)
        run: |
          echo "🔍 Running Bandit security scan..."
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f screen
        continue-on-error: false

      - name: Run Safety (Dependency Vulnerability Scan)
        run: |
          echo "🔍 Scanning dependencies for known vulnerabilities..."
          safety check --json || true
          safety check
        continue-on-error: false

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        continue-on-error: true
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Security Reports to S3
        continue-on-error: true
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          S3_PATH="s3://flask-app-artifact/security-reports/${BRANCH_NAME}/${TIMESTAMP}"
          
          echo "📦 Uploading security reports to S3..."
          aws s3 cp bandit-report.json ${S3_PATH}/bandit-report.json
          
          echo "✅ Reports uploaded to: ${S3_PATH}"
          echo "S3_REPORT_PATH=${S3_PATH}" >> $GITHUB_ENV

  build-and-push:
    name: Build, Scan Image & Push
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to CloudSmith
        uses: docker/login-action@v3
        with:
          registry: docker.cloudsmith.io
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          password: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.cloudsmith.io/${{ secrets.CLOUDSMITH_REPO }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.cloudsmith.io/${{ secrets.CLOUDSMITH_REPO }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Run Trivy (Table Format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.cloudsmith.io/${{ secrets.CLOUDSMITH_REPO }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        continue-on-error: true
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Trivy Reports to S3
        continue-on-error: true
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          S3_PATH="s3://flask-app-artifact/trivy-reports/${BRANCH_NAME}/${TIMESTAMP}"
          
          echo "📦 Uploading Trivy scan results to S3..."
          aws s3 cp trivy-results.sarif ${S3_PATH}/trivy-results.sarif
          
          echo "✅ Trivy reports uploaded to: ${S3_PATH}"

      - name: Push to CloudSmith
        uses: docker/build-push-action@v5
        if: github.event_name != 'pull_request'
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.meta.outputs.digest }}"

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-push]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security Scan**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Docker Build**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Image Scan**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **CloudSmith Push**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Image**: docker.cloudsmith.io/${{ secrets.CLOUDSMITH_REPO }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY