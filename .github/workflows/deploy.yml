name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback

env:
  AWS_REGION: us-east-1
  REGISTRY: docker.cloudsmith.io/flask-sample-app/flask-sample-app
  IMAGE_NAME: flask-app

jobs:
  deploy:
    name: Deploy Flask App to EKS
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Hub
        run: |
          echo "Logging in to Docker registry..."
          echo "${{ secrets.CLOUDSMITH_API_KEY }}" | docker login docker.cloudsmith.io -u "${{ secrets.CLOUDSMITH_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          # Generate unique image tag
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          FULL_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}

          echo "Building image: $FULL_IMAGE_NAME"
          docker build -t $FULL_IMAGE_NAME .
          docker push $FULL_IMAGE_NAME

          # Also tag as latest
          docker tag $FULL_IMAGE_NAME ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Image pushed: $FULL_IMAGE_NAME"

      - name: Configure kubectl
        run: |
          echo "Configuring kubectl..."
          # Get cluster name from Terraform outputs (assuming remote state)
          CLUSTER_NAME="my-eks-cluster"
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ env.AWS_REGION }}

      - name: Verify cluster connectivity
        run: |
          echo "Verifying cluster connectivity..."
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy to EKS
        run: |
          echo "Deploying application to EKS..."

          # Update image tag in deployment.yaml
          sed -i "s|IMAGE_TAG|${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml

          # Apply all Kubernetes manifests
          kubectl apply -f k8s/

          echo "âœ… Deployment completed successfully!"

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."

          # Wait for rollout to complete
          kubectl rollout status deployment/flask-app --timeout=300s

          # Check pods
          kubectl get pods -l app=flask-app

          # Check services
          kubectl get services -l app=flask-app

          # Check ingress
          kubectl get ingress

          echo "âœ… Deployment verification completed!"

      - name: Display deployment information
        run: |
          echo "=========================================="
          echo "ðŸš€ Deployment Completed Successfully!"
          echo "=========================================="
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo ""
          echo "ðŸ”— Application URLs:"
          echo "Load Balancer: $(kubectl get ingress flask-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo 'Pending...')"
          echo ""
          echo "ðŸ“Š Resources deployed:"
          echo "- Deployment: flask-app"
          echo "- Service: flask-app-service"
          echo "- Ingress: flask-app"
          echo "- HPA: flask-app-hpa"
          echo ""
          echo "To check status locally:"
          echo "kubectl get pods -l app=flask-app"
          echo "kubectl logs -l app=flask-app"
          echo "=========================================="
