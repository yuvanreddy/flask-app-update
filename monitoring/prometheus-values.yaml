# Prometheus Stack Configuration for flask-eks
# Install with: helm install prometheus-stack prometheus-community/kube-prometheus-stack -n monitoring -f prometheus-values.yaml

# Prometheus Server Configuration
prometheus:
  prometheusSpec:
    # Retention period for metrics
    retention: 15d
    retentionSize: "45GB"
    
    # Storage for Prometheus data
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    
    # Resource limits
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    
    # Scrape interval
    scrapeInterval: 30s
    evaluationInterval: 30s
    
    # Service Monitor selector (scrape all ServiceMonitors)
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    
    # External labels
    externalLabels:
      cluster: flask-eks
      environment: production

# Grafana Configuration
grafana:
  enabled: true
  
  # Admin credentials (CHANGE THIS!)
  adminPassword: "ChangeMe123!SecurePassword"
  
  # Persistence for Grafana data
  persistence:
    enabled: true
    storageClassName: gp2
    size: 10Gi
  
  # Service configuration
  service:
    type: LoadBalancer
    port: 80
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
  
  # Resources
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Grafana configuration
  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s/"
    analytics:
      check_for_updates: true
  
  # Dashboard providers
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  
  # Pre-installed dashboards
  dashboards:
    default:
      # Kubernetes cluster overview
      kubernetes-cluster:
        gnetId: 7249
        revision: 1
        datasource: Prometheus
      
      # Node exporter full
      node-exporter:
        gnetId: 1860
        revision: 31
        datasource: Prometheus
      
      # Kubernetes pods
      kubernetes-pods:
        gnetId: 6417
        revision: 1
        datasource: Prometheus
      
      # Kubernetes deployment
      kubernetes-deployment:
        gnetId: 8588
        revision: 1
        datasource: Prometheus
      
      # Persistent volumes
      kubernetes-pv:
        gnetId: 13646
        revision: 2
        datasource: Prometheus

# Alertmanager Configuration
alertmanager:
  enabled: true
  
  # Persistence
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  
  # Alert configuration
  config:
    global:
      resolve_timeout: 5m
      # SMTP configuration (optional - configure for email alerts)
      # smtp_smarthost: 'smtp.gmail.com:587'
      # smtp_from: 'alertmanager@example.com'
      # smtp_auth_username: 'your-email@gmail.com'
      # smtp_auth_password: 'your-app-password'
    
    # Routing
    route:
      group_by: ['alertname', 'cluster', 'service', 'namespace']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'default'
      routes:
      - match:
          severity: critical
        receiver: 'critical'
        continue: true
      - match:
          severity: warning
        receiver: 'warning'
    
    # Receivers
    receivers:
    - name: 'default'
      # Add your notification channels here
      
    - name: 'critical'
      # Email example (uncomment and configure)
      # email_configs:
      # - to: 'critical-alerts@example.com'
      #   from: 'alertmanager@example.com'
      #   headers:
      #     Subject: '[CRITICAL] {{ .GroupLabels.alertname }}'
      
      # Slack example (uncomment and configure)
      # slack_configs:
      # - api_url: 'https://hooks.slack.com/services/YOUR/WEBHOOK/URL'
      #   channel: '#alerts-critical'
      #   title: '[CRITICAL] {{ .GroupLabels.alertname }}'
      #   text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
    
    - name: 'warning'
      # Email example
      # email_configs:
      # - to: 'warnings@example.com'

# Prometheus Node Exporter (collects node metrics)
nodeExporter:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Kube State Metrics (collects Kubernetes object metrics)
kubeStateMetrics:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Prometheus Operator
prometheusOperator:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  
  # Admission webhooks
  admissionWebhooks:
    enabled: true
    patch:
      enabled: true

# Default rules
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

# Additional scrape configs (optional)
# prometheus:
#   prometheusSpec:
#     additionalScrapeConfigs:
#     - job_name: 'flask-app'
#       kubernetes_sd_configs:
#       - role: pod
#         namespaces:
#           names:
#           - default
#       relabel_configs:
#       - source_labels: [__meta_kubernetes_pod_label_app]
#         action: keep
#         regex: flask-app
#       - source_labels: [__meta_kubernetes_pod_container_port_number]
#         action: keep
#         regex: "5000"
